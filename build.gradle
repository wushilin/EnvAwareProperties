plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group="net.wushilin"
version="1.0.7"

repositories {
    mavenCentral()
}
dependencies {
    testImplementation(platform('org.junit:junit-bom:5.9.0'))
    testImplementation('org.junit.jupiter:junit-jupiter')
}

java {
    withJavadocJar()
    withSourcesJar()
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}


artifacts {
    archives javadocJar, sourcesJar
}


test {
    useJUnitPlatform()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java   // include the JAR

            pom {
                name.set("EnvAwareProperties")
                description.set("Env Aware Properties")
                url.set("https://github.com/wushilin/envawareproperties")

                licenses {
                    license {
                        name.set("Apache License 2.0")
                        url.set("https://www.apache.org/licenses/LICENSE-2.0")
                    }
                }
                developers {
                    developer {
                        id.set("wushilin")
                        name.set("Wu Shilin")
                        email.set("wushilin.sg@gmail.com")
                    }
                }
                scm {
                    connection.set("scm:git:git://github.com/wushilin/envawareproperties.git")
                    developerConnection.set("scm:git:ssh://github.com:wushilin/envawareproperties.git")
                    url.set("https://github.com/wushilin/envawareproperties")
                }
            }
        }
    }

    repositories {
        maven {
            url = uri("${buildDir}/repo")
        }
    }
}



signing {
    useInMemoryPgpKeys(
            System.getenv("GPG_KEY_ID"),
            System.getenv("GPG_SECRET"),
            System.getenv("GPG_PASSPHRASE"),
    )
    sign publishing.publications.mavenJava
}

tasks.register('zipRepo', Zip) {
    group = 'distribution'
    description = 'Zip the local Maven repo after publishing'

    from layout.buildDirectory.dir('repo')
    archiveFileName.set('maven-repo-net.zip')
    destinationDirectory.set(layout.buildDirectory.dir('distributions'))
}

def tasksToFinalize = ['publish', 'publishAllPublicationsToMavenRepository']

tasksToFinalize.each { taskName ->
    tasks.named(taskName) {
        finalizedBy(tasks.named('zipRepo'))
    }
}